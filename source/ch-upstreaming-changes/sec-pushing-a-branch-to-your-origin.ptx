<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-pushing-a-branch-to-your-origin" xmlns:xi="http://www.w3.org/2001/XInclude" >
  <title>Pushing a Branch to Your Origin</title>

  <introduction>
    <p>
      You have made the changes necessary to address the issue you were assigned, and you are now ready to upstream those changes.
      In order to do that, the first step is to get the changes you have made into GitHub so that the upstream maintainers can be told about them.
    </p>
  </introduction>

  <exercises>
  <title />
  <p>
    As shown in <xref ref="fig-pushing-feature-branch" />, this is done by <em>pushing your feature branch</em> to your origin repository.
    More generally, pushing a branch, copies it from a local repository to a remote repository.
  </p>

  <p>
    <figure xml:id="fig-pushing-feature-branch" >
      <caption> Push Feature Branch to Origin. </caption>
      <image source="images/ch-upstreaming-changes/pushing-feature-branch.png" width="75%">
        <description>
          Cloud image of the feature branch to be merged into your origin repository.
        </description>
      </image>
    </figure>
  </p>

  <exercise xml:id="ex-list-branches" label="ex-list-branches">
    <statement>
      <p>
        The <c>git branch -l</c> (lower case L, not one) command lists all of the branches that exist in your local repository.
      </p>
      <p>
        How many branches are in your local repository?
      </p>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>
            1 - <c>main</c>
          </p>
        </statement>
        <feedback>
          <p>
            Look again, you should see more than just the <c>main</c> branch.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            1 - <c>feature branch</c>
          </p>
        </statement>
        <feedback>
          <p>
            Look again, you should see more than just the <c>feature</c> branch.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>
            2 - <c>main</c> and <c>feature branch</c>
          </p>
        </statement>
        <feedback>
          <p>
            Correct! Your local repository will have both the <c>main</c> branch and your <c>feature</c> branch.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            3 or more with differing branch names
          </p>
        </statement>
        <feedback>
          <p>
            If you have more than 2 branches perhaps you created a feature branch multiple times by accident.
          </p>
        </feedback>
      </choice>
    </choices>

    <hint>
      <p>
        Refer to <xref ref="fig-pushing-feature-branch"/> and look at the local branches on your machine.
      </p>
    </hint>
  </exercise>

  <exercise xml:id="ex-branch-diff" label="ex-branch-diff">
    <introduction>
      <p>
        Use your browser to look at your <c>origin</c> repository on GitHub.
      </p>
    </introduction>


    <task xml:id="ex-branch-diff-a" label="ex-branch-diff-a">
      <statement>
        <p>
          How many branches appear in your origin repository on GitHub?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>
              1 - <c>main</c>
            </p>
          </statement>
          <feedback>
            <p>
              Correct! There is only 1 branch, <c>main</c> in your origin repository on GitHub.
            </p>
          </feedback>
        </choice>
  
        <choice>
          <statement>
            <p>
              1 - <c>feature branch</c>
            </p>
          </statement>
          <feedback>
            <p>
              Look again, your <c>feature</c> branch should not be listed in GitHub as it is only in your local repository.
            </p>
          </feedback>
        </choice>
  
        <choice>
          <statement>
            <p>
              2 - <c>main</c> and <c>feature branch</c>
            </p>
          </statement>
          <feedback>
            <p>
              Look again, your <c>feature</c> branch should not be listed in GitHub as it is only in your local repository.
            </p>
          </feedback>
        </choice>
  
        <choice>
          <statement>
            <p>
              3 or more with differing branch names
            </p>
          </statement>
          <feedback>
            <p>
              Perhaps you aren't in your origin repository. Make sure you see your GitHub userid in the upper left hand corner of your GitHub tab.
            </p>
          </feedback>
        </choice>
      </choices>
  
      <hint>
        <p>
          Make sure you are in your origin repository, not the upstream repository. Refer to <xref ref="fig-pushing-feature-branch"/> and look at the origin to see what branches should appear on GitHub.
        </p>
      </hint>
    </task>


    <task xml:id="ex-branch-diff-b" label="ex-branch-diff-b">
      <statement>
        <p>
          Why is there a difference between the branches in your origin repository and your local repository?
        </p>
      </statement>
      <response />
    </task>
  </exercise>

  <p>
    <term>Getting a Personal Access Token: </term>
  </p>

  <p>
    Before you will be able to push your feature branch to GitHub you will have to get a <term>Personal Access Token (PAT)</term> from GitHub.
    A PAT is like a password but has some security benefits.
    In particular, you can have multiple different PATs.
    Each one can have different limits on what can be done with it and each one can be revoked individually without affecting the others.
  </p>

  <p>
    When interacting with GitHub using the git CLI (e.g.
    when pushing a branch), GitHub requires that you use a PAT for authentication instead of your password.
  </p>

  <exercise xml:id="ex-getting-pat-remove" label="ex-getting-pat-remove">
    <introduction>
      <p>
        Follow GitHub's instructions for creating a (classic) personal access token: <url href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic" visual="docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic">Creating a Personal Access Token (classic)</url>.
      </p>

      <p>
        When doing so be sure to:
        <ul>
          <li>
            <p>
              Choose “repo” for the “scopes and permissions.”
            </p>
          </li>

          <li>
            <p>
              Be sure to copy and paste your PAT somewhere safe – maybe e-mail it to yourself.
              You will not be able to retrieve it again after you leave the page.
            </p>
          </li>
        </ul>
      </p>

      <p>
        Note: Typing or even copy and pasting your PAT every time it is needed can be a hassle.
        To help, the git CLI provides what is known as the <term>credential helper</term>.
        The git CLI in the KitClient has configured the credential helper so that your PAT will be stored when you enter it the first time.
        It will then be used automatically for future commands.
        If you are curious, you can learn more about the credential helper here: <url href="https://techexpertise.medium.com/storing-git-credentials-with-git-credential-helper-33d22a6b5ce7" visual="techexpertise.medium.com/storing-git-credentials-with-git-credential-helper-33d22a6b5ce7">Storing Git Credentials with Git Credential Helper</url>.
      </p>
    </introduction>
  </exercise>

  <p>
    <term>Pushing your Feature Branch: </term>
  </p>

  <exercise xml:id="ex-push-branch-linux" label="ex-push-branch-linux">
    <introduction>
      <p>
        The <c>git push &lt;remote repository name&gt; &lt;branch&gt;</c> command will push the specified branch of your local repository to the specified remote repository (i.e.
        on GitHub).
      </p>

      <p>
        Use a command that will push your <em>feature branch</em> from your local repository to your <em>origin repository</em> on GitHub.
      </p>

      <p>
        Note: You can use the name of the remote repository, so you do not need to use the full URL.
        You will also need to paste your PAT as the password when it is requested. <em>The cursor will not move when you put in the PAT nor will you see any characters. After you type or paste it hit Enter</em>
      </p>
    </introduction>
  </exercise>

  <exercise xml:id="ex-push-error-linux" label="ex-push-error-linux">
    <introduction>
      <p>
        The output from <xref ref="ex-push-branch-linux"/> should not contain any error messages.
        The last few lines should also give you some indication that that your push was successful.
        Visit your origin repository on GitHub and check that the branch was pushed.
      </p>
    </introduction>
  </exercise>
  </exercises>
</section>
