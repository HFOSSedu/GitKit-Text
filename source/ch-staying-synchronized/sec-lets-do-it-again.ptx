<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-lets-do-it-again" xmlns:xi="http://www.w3.org/2001/XInclude" >
  <title>Let's Do it Again</title>

  <introduction>
    <p>
      You’ve learned a lot about Git and GitHub.
      But, to become proficient with these tools takes a lot of repetition and practice.
      The exercises in this section ask you to repeat the process of finding an issue, fixing it and creating a pull request as you did in <xref ref="topic-upstreaming-changes" text="type-global-title"/>.
      This will give you more good practice. But also, the issue you will be fixing this time has been carefully planned as a setup for the next chapter too!
    </p>
  </introduction>


  <subsection xml:id="topic-process-of-fixing-an-issue">
    <title>Process of Fixing an Issue</title>
      <introduction>
        <p>
          Before you get into the work of fixing a new issue, it will be helpful to review the steps that you'll need to use and they were and how they fit together.
        </p>
      </introduction>

    <exercises>
      <title/>
      <exercise xml:id="ex-fixing-issue-ordering" label="ex-fixing-issue-ordering">
        <statement>
          <p>
            The steps you carried out in <xref ref="topic-upstreaming-changes" /> are listed below in a jumbled-up order, drag them to the right to arrange them the proper order.
          </p>
        </statement>
        <blocks randomize="yes"> 
          <block>
            <p>
              Claim an issue
            </p>
          </block> 
          <block>
            <p>
              Create a new feature branch
            </p>
          </block>
          <block>
            <p>
              Switch to the feature branch
            </p>
          </block>
          <block>
            <p>
              Edit the local files
            </p>
          </block>
          <block>
            <p>
              Stage your changes
            </p>
          </block>
          <block>
            <p>
              Commit changes to the feature branch
            </p>
          </block>
          <block>
            <p>
              Push the feature branch to your origin
            </p>
          </block>
          <block>
            <p>
              Make a pull request to the upstream
            </p>
          </block>
        </blocks>
        <hint>
          <p>
            Think about the full process that you worked through from claiming your Round1 issue through making a pull request for your changes.
          </p>
        </hint>
      </exercise>
    </exercises>
  </subsection>


  <subsection xml:id="topic-claim-round-two-issue" label="topic-claim-round-two-issue">
    <title>Claim a Round2 Issue</title>
    <introduction>
      <p>
        Now it is time to find a new issue to work on.
      </p>
    </introduction>

    <exercises>
    <title />
      <exercise xml:id="ex-claim-issue" label="ex-claim-issue">
        <statement>
          <p>
            Go to the issue tracker in the <em>upstream FarmData2 repository</em> that you are using for your course.
          </p>
          <p>
            Use the "Labels" dropdown in the issue tracker to filter for issues labeled with the “Round2” tag.
          </p>
          <p>
            How many issues have the Round2 tag?
          </p>
        </statement>
        <choices>
          <choice correct="yes">
            <statement>
              <p>
                4
              </p>
            </statement>
            <feedback>
              <p>
                Correct.
              </p>
            </feedback>
          </choice>

          <choice>
            <statement>
              <p>
                6
              </p>
            </statement>
            <feedback>
              <p>
                Be sure you have selected the "Round2" label.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                35
              </p>
            </statement>
            <feedback>
              <p>
                Be sure you have selected the "Round2" label.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                39
              </p>
            </statement>
            <feedback>
              <p>
                Be sure you have selected the "Round2" label.
              </p>
            </feedback>
          </choice>
        </choices>
        <hint>
          <p>
            Make sure you have the Round2 tag selected in the "Labels" dropdown. The "Labels" dropdown is between the "Author" and "Projects" dropdowns.
          </p>
        </hint>
      </exercise>

      <exercise xml:id="ex-claim-issue-b" label="ex-claim-issue-b">
        <statement>
          <p>
            Clearly there are not enough “Round2” issues for everyone to have their own as was the case with the “Round1” issues.
            So, this time there will be multiple people working on the same issue.
          </p>

          <p>
            Pick one of the “Round2” issues to work on and make a comment on it to indicate your interest in working on it.
            Note it is not necessary that the issue be assigned to you this time.
            Try to spread out across the issues so that multiple people have commented that they are working on each one.
          </p>
          <p>
            Give the number of the issue you chose.
          </p>

          <p>
            <var width="10" />
          </p>
        </statement>
        <setup>
          <var> 
            <condition string="^#?(36|37|38|39)$">
              <feedback>
                <p>
                  Thank you for selecting a Round2 issue.
                </p>
              </feedback>
            </condition> 
            <condition string=".*">
              <feedback>
                <p>
                  Make sure that your issue is labeled as a Round2 issue.
                </p>
              </feedback>
            </condition> 
          </var> 
        </setup>
      </exercise>
    </exercises>
  </subsection>

  <subsection>
    <title>Fix the Issue</title>
    <introduction>
      <p>
        Now that you have an issue to work on, it is time to fix it. But before you actually start fixing the issue, let's review some of the Git commands and a few other important ideas you'll need to use to carry out the steps from <xref ref="ex-fixing-issue-ordering" />.
      </p>
    </introduction>

    <exercises>
    <title />
      <exercise xml:id="ex-fixing-issue-process" label="ex-fixing-issue-process">

        <task xml:id="ex-fixing-issue-process-a" label="ex-fixing-issue-process-a">
          <statement>
            <p>
              Match the Git commands will you use for each of the tasks indicated below.
            </p>
          </statement>
          <matches> 
          <match>
            <premise>
              <c>git branch &lt;branch&gt;</c>
            </premise> 
            <response>
              Create your feature branch
            </response> 
          </match> 
          <match>
            <premise>
              <c>git switch &lt;branch&gt;</c>
            </premise> 
            <response>
              Switch to your feature branch
            </response> 
          </match> 
          <match>
            <premise>
              <c>git stage &lt;file&gt;</c>
            </premise> 
              <response>
                Stage your changes for a commit.
            </response> 
          </match> 
          <match>
            <premise>
              <c>git commit -m "message"</c>
            </premise> 
            <response>
              Commit your changes to the active branch.
            </response> 
          </match> 
          <match>
            <premise>
              <c>git push origin &lt;branch&gt;</c>
            </premise> 
            <response>
              Push your feature branch to your origin.
            </response> 
          </match> 
          </matches>
          <hint>
            <p>
              The command reference that you created in <xref ref="topic-git-command-summary-upstreaming"/> may come in handy here.
            </p>
          </hint>
        </task>


        <task xml:id="ex-fixing-issue-process-b" label="ex-fixing-issue-process-b">
          <statement>
            <p>
              When creating branches you should always use name that describes what is being done in the branch, without being too long.  This will help you to remember the purpose of the branch, but not make it onerous to type.
            </p>
            <p>
              Which of the following would be the best name for a feature branch for issue #37 that adds a link to the NSF award in the Acknowledgements section?
            </p>
          </statement>

          <choices randomize="yes">
            <choice>
              <statement>
                <p>
                  issue37
                </p>
              </statement>
              <feedback>
                <p>
                  This branch name identifies the issue but you would have to remember what that issue is to know what the branch does.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  adding-link
                </p>
              </statement>
              <feedback>
                <p>
                  This branch sort of describes what is being done, but isn't specific enough to know what the branch really does.
                </p>
              </feedback>
            </choice>
            <choice correct="yes">
              <statement>
                <p>
                  link-nsf-award
                </p>
              </statement>
              <feedback>
                <p>
                  Correct. This branch name has enough context to describe what the branch does without being excessively long.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  add-link-to-nsf-award-in-acknowledgements-section
                </p>
              </statement>

              <feedback>
                <p>
                  This branch name is very descriptive but seems excessively long. Can you imagine typing that over and over again?
                </p>
              </feedback>
            </choice>
          </choices>
          <hint>
            <p>
              Refer back to <xref ref="topic-creating-a-feature-branch" text="type-global-title"/> for information on branch names.
            </p>
          </hint>
        </task>

        <task xml:id="ex-fixing-issue-process-c" label="ex-fixing-issue-process-c">
          <statement>
            <p>
              When writing commit messages for the <c>git commit</c> the message should be descriptive of what the changes in the commit do.
            </p>
            <p>
              Which of the following would be the best commit message for the fix for issue 38 that adds a link to the GNOME Community Engagement Challenge in the acknowledgements?
            </p>
          </statement>
          <choices randomize="yes">
            <choice correct="yes">
              <statement>
                <p>
                  Adds the URL for GNOME to the acknowledgements section of the REAMDE.md file.
                </p>
              </statement>
              <feedback>
                <p>
                  Correct. This commit message briefly but completing describes the change made.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  Added URL.
                </p>
              </statement>
              <feedback>
                <p>
                  This commit message doesn't provide enough information about the URL added.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  Updated README.md.
                </p>
              </statement>
              <feedback>
                <p>
                  This commit message doesn't provide enough information about what has been changed in the README.md file.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  Fixed a typo.
                </p>
              </statement>
              <feedback>
                <p>
                  This commit message is too generic and does not actually describe the changes that would be committed for this issue.
                </p>
              </feedback>
            </choice>
          </choices>
          <hint>
            <p>
              Refer back to <xref ref="topic-committing-to-your-local-repository" text="type-global-title"/> for information on commit messages.
            </p>
          </hint>
        </task>
      </exercise>
    </exercises>
  </subsection>

  <subsection xml:id="topic-upstreaming-round2-changes" label="topic-upstreaming-round2-changes">
    <title>Upstreaming the Changes</title>
    <introduction>
      <p>
        Now that you have fixed the issue and pushed your feature branch, the last thing to do is to make a pull request.
      </p>
    </introduction>
    <exercises>
    <title />
      <exercise xml:id="ex-pull-request-info-b" label="ex-pull-request-info-b">
        <statement>
          <p>
            Make a pull request for your feature branch to the upstream repository for your course.
          </p>
          <p>
            Enter the full URL of your PR below.
          </p>

          <p>
            <var width="65" />
          </p>
        </statement>
        <setup> 
          <var> 
            <condition string="^https://github\.com/.+/pull/[0-9]+$">
              <feedback>
                <p>
                  Thank you for supplying your pull request URL.
                </p>
              </feedback>
            </condition> 
            <condition string=".*">
              <feedback>
                <p>
                  Make sure you have the complete URL of the PR starting with https and ending with the number of your pull request.
                </p>
              </feedback>
            </condition> 
          </var> 
        </setup>
      </exercise>

      <exercise xml:id="ex-pull-request-problem" label="ex-pull-request-problem">
        <introduction>
          <p>
            Because there were a limited number of “Round2” issues, other students in your class will have worked on the same Round2 issue as you id.  Thus, they will also have made pull requests that contain changes to the same line(s) in the <c>README.md</c> file as you did. The tasks below will ask you some questions about this situation.
          </p>
        </introduction>

        <task xml:id="ex-round-two-pull-request-pre-merge" label="ex-round-two-pull-request-pre-merge">
          <statement>
            <p>
              Assume for now that the maintainers have not merged any pull requests that fix the Round2 issue that is addressed by your pull request.
            </p>
            <p>
              Which of the following statements best describes this situation.
            </p>
          </statement>
          <choices randomize="yes">
            <choice correct="yes">
              <statement>
                <p>
                  GitHub will indicate that your PR can be merged automatically because it does not contain any conflicts with the upstream <c>main</c> branch.
                </p>
              </statement>
              <feedback>
                <p>
                  Correct. While your PR changes the same lines of the <c>README.md</c> file as the other PRs, none of those PRs have been merged into the upstream <c>main</c>.  Thus, your PR will not contain any conflicts with the upstream <c>main</c> branch.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  GitHub will indicate that your PR cannot be merged automatically because it contains a conflict with the upstream <c>main</c> branch. 
                </p>
              </statement>
              <feedback>
                <p>
                  While your PR changes the same lines of the <c>README.md</c> file as the other PRs, none of those PRs have been merged into the upstream <c>main</c>.  Thus, your PR will not contain any conflicts with the upstream <c>main</c> branch.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  If your PR was the first one submitted for your Round2 issue, GitHub will indicate that it can be merged automatically, otherwise it will indicate that it cannot because there is a conflict with the upstream <c>main</c>.
                </p>
              </statement>
              <feedback>
                <p>
                  The order in which the PR's are created does not matter. A conflict will only arise after the changes in one of the PRs are merged into the upstream <c>main</c>. Thus, because no PRs have been merged there is no conflict between your PR and the upstream <c>main</c> at this point.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  GitHub will indicate that your PR can be merged automatically because it does not contain conflicts with any of the other PRs that have been submitted for your Round2 issue.
                </p>
              </statement>
              <feedback>
                <p>
                  Your PR and the others for your Round2 issue change the same lines, so in some sense your PR conflicts with the other PRs. However, none of them have been merged into the upstream <c>main</c> yet.  Thus, there is no conflict between your PR and the upstream <c>main</c> at this point.
                </p>
              </feedback>
            </choice>
          </choices>
          <hint>
            <p>
              Visit your PR in the upstream repo and see what GitHub tells you about whether it can be merged or not.
            </p>
          </hint>
        </task>

        <task xml:id="ex-round-two-pull-request-post-merge" label="ex-round-two-pull-request-post-merge">
          <statement>
            <p>
              Now assume that the maintainers have merged one of the other pull requests (not yours) that fix your Round2 issue.
            </p>
            <p>
              Which of the following statements best describes this situation.
            </p>
          </statement>
          <choices randomize="yes">
            <choice>
              <statement>
                <p>
                  GitHub will indicate that your PR can be merged automatically because it does not contain any conflicts with the upstream <c>main</c> branch.
                </p>
              </statement>
              <feedback>
                <p>
                  Your PR will have changed the same lines in <c>README.md</c> as the merged PR.  The changes from the merged PR are now in the upstream <c>main</c> branch. Thus, your feature branch will now have conflicts with the upstream <c>main</c> branch and will not be able to be merged automatically.
                </p>
              </feedback>
            </choice>
            <choice correct="yes">
              <statement>
                <p>
                  GitHub will indicate that your PR cannot be merged automatically because it contains a conflict with the upstream <c>main</c> branch. 
                </p>
              </statement>
              <feedback>
                <p>
                  Correct. A PR for the Round2 issue you were working on has been merged into the upstream <c>main</c>. Your PR contained changes that changed the same lines of the <c>README.md</c> file as the merged PR. Thus, your PR will have conflicts with the upstream <c>main</c> branch and will not be able to be merged automatically.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  If your PR for your Round2 issue was submitted before the other one was merged, GitHub will indicate that your PR can be merged automatically.
                </p>
              </statement>
              <feedback>
                <p>
                  The order in which the PR's are created does not matter. GitHub reevaluates whether there is a conflict each time you visit the PR page. Thus, because the other PR was merged, and it changed the same lines in <c>README.md</c> as your PR, your PR will now contain a conflict with the upstream <c>main</c> branch.
                </p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>
                  GitHub will indicate that your PR cannot be merged automatically because it contain conflicts with all of the other PRs that have been submitted for your Round2 issue.
                </p>
              </statement>
              <feedback>
                <p>
                  Your PR will in some sense contain conflicts with all of the other PRs for the same Round2 issue.  However, only the conflict with the upstream <c>main</c> branch matter here. That conflict was created when the other PR for your Round2 issue was merged. 
                </p>
              </feedback>
            </choice>
          </choices>
          <hint>
            <p>
              Visit your PR in the upstream repo and see what GitHub tells you about whether it can be merged or not.
            </p>
          </hint>
        </task>
      </exercise>
    </exercises>
  </subsection>
</section>
